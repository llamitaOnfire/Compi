/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFileChooser;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author sebas2002cr
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEntrada = new javax.swing.JTextField();
        btnAnalizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnCargarDocumento = new javax.swing.JButton();
        txtNombreDocumento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableResultado = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        txtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntradaActionPerformed(evt);
            }
        });

        btnAnalizar.setBackground(new java.awt.Color(0, 102, 102));
        btnAnalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnAnalizar.setText("Analizar linea");
        btnAnalizar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAnalizar.setBounds(new java.awt.Rectangle(4, 4, 4, 4));
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        jLabel1.setText("Cargar un documento de texto:");

        btnCargarDocumento.setBackground(new java.awt.Color(0, 102, 102));
        btnCargarDocumento.setForeground(new java.awt.Color(255, 255, 255));
        btnCargarDocumento.setText("Cargar documento");
        btnCargarDocumento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCargarDocumento.setBounds(new java.awt.Rectangle(4, 4, 4, 4));
        btnCargarDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarDocumentoActionPerformed(evt);
            }
        });

        txtNombreDocumento.setEditable(false);

        jLabel2.setText("Documento leido:");

        jLabel3.setText("Resultado del Scanner Lexico:");

        jTableResultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Token", "Tipo de Token", "Líneas"
            }
        ));
        jScrollPane2.setViewportView(jTableResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                    .addComponent(txtEntrada))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnCargarDocumento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addComponent(txtNombreDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEntrada)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(btnCargarDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombreDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 153, 153)))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
 // Obtener el texto del campo de entrada
    String textoEntrada = txtEntrada.getText();

    // Crear un lector para procesar el texto de entrada
    StringReader reader = new StringReader(textoEntrada);
    Lexer lexer = new Lexer(reader);
    List<TokenInfo> resultados = new ArrayList<>();

     // Se crea un mapa para realizar un seguimiento de la cantidad de veces que un token aparece en cada línea.
    Map<String, Map<String, Map<Integer, Integer>>> contadorTokens = new HashMap<>();

    try {
        while (true) {
            Tokens tokens = lexer.yylex();
            if (tokens == null) {
                break; // Salir del bucle al final del texto
            }

            // Obtener el token y la línea actual
            String token = lexer.lexeme;
            String tipo = tokens.toString();
            int lineaActual = lexer.lineaActual;

            // Obtener o crear un mapa para el token actual
            Map<String, Map<Integer, Integer>> tipoTokenMap = contadorTokens.computeIfAbsent(tipo, k -> new HashMap<>());

            // Obtener o crear un mapa para el token actual dentro del tipo de token
                Map<Integer, Integer> tokenLineas = tipoTokenMap.computeIfAbsent(token, k -> new HashMap<>());

                // Se incrementa el contador para la línea actual en el mapa.
                tokenLineas.put(lineaActual, tokenLineas.getOrDefault(lineaActual, 0) + 1);
        }

        // Mostrar los resultados en la tabla (asumiendo que tienes una tabla llamada jTableResultado)
        DefaultTableModel model = (DefaultTableModel) jTableResultado.getModel();
        model.setRowCount(0); // Limpiar la tabla

        for (Map.Entry<String, Map<String, Map<Integer, Integer>>> tipoEntry : contadorTokens.entrySet()) {
                String tipoToken = tipoEntry.getKey();
                Map<String, Map<Integer, Integer>> tipoTokenMap = tipoEntry.getValue();

                for (Map.Entry<String, Map<Integer, Integer>> entry : tipoTokenMap.entrySet()) {
                    String token = entry.getKey();
                    Map<Integer, Integer> lineas = entry.getValue();

                    StringBuilder lineasStr = new StringBuilder();
                    for (Map.Entry<Integer, Integer> lineaEntry : lineas.entrySet()) {
                        int linea = lineaEntry.getKey();
                        int contador = lineaEntry.getValue();
                        if (lineasStr.length() > 0) {
                            lineasStr.append(", ");
                        }
                        lineasStr.append(linea);
                        if (contador > 1) {
                            lineasStr.append(" (").append(contador).append(")");
                        }
                    }

                    model.addRow(new Object[]{token, tipoToken, lineasStr.toString()});
                }
            }
    } catch (IOException ex) {
        // Manejo de excepciones en caso de error de lectura del texto
        Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
    }       
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnCargarDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarDocumentoActionPerformed
 // Este método se ejecuta cuando se hace clic en el botón "Cargar Documento" en la interfaz de usuario.

    // Se crea un cuadro de diálogo para que el usuario seleccione un archivo.
    JFileChooser fileChooser = new JFileChooser();
    int seleccion = fileChooser.showOpenDialog(this);

    // Se verifica si el usuario ha seleccionado un archivo.
    if (seleccion == JFileChooser.APPROVE_OPTION) {
        // Se obtiene el archivo seleccionado.
        File archivoSeleccionado = fileChooser.getSelectedFile();
        // Se obtiene el nombre del archivo y se muestra en un campo de texto en la interfaz de usuario.
        String nombreArchivo = archivoSeleccionado.getName();
        txtNombreDocumento.setText(nombreArchivo);

        try {
            // Se crea un lector para leer el archivo seleccionado.
            Reader lector = new BufferedReader(new FileReader(archivoSeleccionado));
            // Se crea un analizador léxico (Lexer) para procesar el archivo.
            Lexer lexer = new Lexer(lector);
            // Se crea una lista para almacenar los resultados del análisis léxico.
            List<TokenInfo> resultados = new ArrayList<>();

            // Se crea un mapa para realizar un seguimiento de la cantidad de veces que un token aparece en cada línea.
            Map<String, Map<String, Map<Integer, Integer>>> contadorTokens = new HashMap<>();


            // Se inicia un bucle infinito para analizar el archivo línea por línea.
            while (true) {
                // Se obtiene el siguiente token del analizador léxico.
                Tokens tokens = lexer.yylex();
                // Se verifica si se ha llegado al final del archivo.
                if (tokens == null) {
                    break; // Salir del bucle al final del archivo.
                }

                // Se obtiene el token y la línea actual.
                String token = lexer.lexeme;
                String tipo = tokens.toString();
                int lineaActual = lexer.lineaActual;

                // Se obtiene o crea un mapa para el token actual en el mapa contadorTokens.
                Map<String, Map<Integer, Integer>> tipoTokenMap = contadorTokens.computeIfAbsent(tipo, k -> new HashMap<>());
                
                // Obtener o crear un mapa para el token actual dentro del tipo de token
                Map<Integer, Integer> tokenLineas = tipoTokenMap.computeIfAbsent(token, k -> new HashMap<>());

                // Se incrementa el contador para la línea actual en el mapa.
                tokenLineas.put(lineaActual, tokenLineas.getOrDefault(lineaActual, 0) + 1);
            }

            // Se muestra los resultados en una tabla en la interfaz de usuario.
            DefaultTableModel model = (DefaultTableModel) jTableResultado.getModel();
            model.setRowCount(0); // Limpiar la tabla antes de agregar resultados.

            for (Map.Entry<String, Map<String, Map<Integer, Integer>>> tipoEntry : contadorTokens.entrySet()) {
                String tipoToken = tipoEntry.getKey();
                Map<String, Map<Integer, Integer>> tipoTokenMap = tipoEntry.getValue();

                for (Map.Entry<String, Map<Integer, Integer>> entry : tipoTokenMap.entrySet()) {
                    String token = entry.getKey();
                    Map<Integer, Integer> lineas = entry.getValue();

                    StringBuilder lineasStr = new StringBuilder();
                    for (Map.Entry<Integer, Integer> lineaEntry : lineas.entrySet()) {
                        int linea = lineaEntry.getKey();
                        int contador = lineaEntry.getValue();
                        if (lineasStr.length() > 0) {
                            lineasStr.append(", ");
                        }
                        lineasStr.append(linea);
                        if (contador > 1) {
                            lineasStr.append(" (").append(contador).append(")");
                        }
                    }

                    model.addRow(new Object[]{token, tipoToken, lineasStr.toString()});
                }
            }
        } catch (FileNotFoundException ex) {
            // Manejo de excepciones en caso de que el archivo no se encuentre.
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            // Manejo de excepciones en caso de error de lectura del archivo.
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_btnCargarDocumentoActionPerformed



    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnCargarDocumento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableResultado;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextField txtNombreDocumento;
    // End of variables declaration//GEN-END:variables
}
